(define the-empty-stream 'nil)
(define (stream-null? stream) (= 'nil stream))
(define (cons-stream x stream) (cons x stream))
(define (stream-car stream) (car stream))
(define (stream-cdr stream) (cdr stream))
(define (stream-map proc s)
  (if (stream-null? s)
      the-empty-stream
      (cons-stream (proc (stream-car s))
                   (stream-map proc (stream-cdr s)))))
(define (stream-ref s n)
  (if (= n 0)
      (stream-car s)
      (stream-ref (stream-cdr s) (- n 1))))
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
(define (integral f a b dx)
  (* (sum f (+ a (/ dx 2.0)) (lambda (x) (+ x dx)) b) dx))
(define (solve f y0 dt)
  ((lambda (y dy) y)
   (integral dy y0 dt)
   (stream-map f y)
   ))
(solve (lambda (y) y) 1 0.001)
